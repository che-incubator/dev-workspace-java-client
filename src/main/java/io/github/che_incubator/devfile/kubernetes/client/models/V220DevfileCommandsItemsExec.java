/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.che_incubator.devfile.kubernetes.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.che_incubator.devfile.kubernetes.client.models.V220DevfileCommandsItemsExecEnv;
import io.github.che_incubator.devfile.kubernetes.client.models.V220DevfileCommandsItemsExecGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CLI Command executed in an existing component container
 */
@ApiModel(description = "CLI Command executed in an existing component container")

public class V220DevfileCommandsItemsExec {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<V220DevfileCommandsItemsExecEnv> env = null;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private V220DevfileCommandsItemsExecGroup group;

  public static final String SERIALIZED_NAME_HOT_RELOAD_CAPABLE = "hotReloadCapable";
  @SerializedName(SERIALIZED_NAME_HOT_RELOAD_CAPABLE)
  private Boolean hotReloadCapable;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_WORKING_DIR = "workingDir";
  @SerializedName(SERIALIZED_NAME_WORKING_DIR)
  private String workingDir;


  public V220DevfileCommandsItemsExec commandLine(String commandLine) {
    
    this.commandLine = commandLine;
    return this;
  }

   /**
   * The actual command-line string  Special variables that can be used:   - &#x60;$PROJECTS_ROOT&#x60;: A path where projects sources are mounted as defined by container component&#39;s sourceMapping.   - &#x60;$PROJECT_SOURCE&#x60;: A path to a project source ($PROJECTS_ROOT/&lt;project-name&gt;). If there are multiple projects, this will point to the directory of the first one.
   * @return commandLine
  **/
  @ApiModelProperty(required = true, value = "The actual command-line string  Special variables that can be used:   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.")

  public String getCommandLine() {
    return commandLine;
  }


  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public V220DevfileCommandsItemsExec component(String component) {
    
    this.component = component;
    return this;
  }

   /**
   * Describes component to which given action relates
   * @return component
  **/
  @ApiModelProperty(required = true, value = "Describes component to which given action relates")

  public String getComponent() {
    return component;
  }


  public void setComponent(String component) {
    this.component = component;
  }


  public V220DevfileCommandsItemsExec env(List<V220DevfileCommandsItemsExecEnv> env) {
    
    this.env = env;
    return this;
  }

  public V220DevfileCommandsItemsExec addEnvItem(V220DevfileCommandsItemsExecEnv envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Optional list of environment variables that have to be set before running the command
   * @return env
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of environment variables that have to be set before running the command")

  public List<V220DevfileCommandsItemsExecEnv> getEnv() {
    return env;
  }


  public void setEnv(List<V220DevfileCommandsItemsExecEnv> env) {
    this.env = env;
  }


  public V220DevfileCommandsItemsExec group(V220DevfileCommandsItemsExecGroup group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V220DevfileCommandsItemsExecGroup getGroup() {
    return group;
  }


  public void setGroup(V220DevfileCommandsItemsExecGroup group) {
    this.group = group;
  }


  public V220DevfileCommandsItemsExec hotReloadCapable(Boolean hotReloadCapable) {
    
    this.hotReloadCapable = hotReloadCapable;
    return this;
  }

   /**
   * Whether the command is capable to reload itself when source code changes. If set to &#x60;true&#x60; the command won&#39;t be restarted and it is expected to handle file changes on its own.  Default value is &#x60;false&#x60;
   * @return hotReloadCapable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.  Default value is `false`")

  public Boolean getHotReloadCapable() {
    return hotReloadCapable;
  }


  public void setHotReloadCapable(Boolean hotReloadCapable) {
    this.hotReloadCapable = hotReloadCapable;
  }


  public V220DevfileCommandsItemsExec label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Optional label that provides a label for this command to be used in Editor UI menus for example
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional label that provides a label for this command to be used in Editor UI menus for example")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public V220DevfileCommandsItemsExec workingDir(String workingDir) {
    
    this.workingDir = workingDir;
    return this;
  }

   /**
   * Working directory where the command should be executed  Special variables that can be used:   - &#x60;$PROJECTS_ROOT&#x60;: A path where projects sources are mounted as defined by container component&#39;s sourceMapping.   - &#x60;$PROJECT_SOURCE&#x60;: A path to a project source ($PROJECTS_ROOT/&lt;project-name&gt;). If there are multiple projects, this will point to the directory of the first one.
   * @return workingDir
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Working directory where the command should be executed  Special variables that can be used:   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.")

  public String getWorkingDir() {
    return workingDir;
  }


  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V220DevfileCommandsItemsExec v220DevfileCommandsItemsExec = (V220DevfileCommandsItemsExec) o;
    return Objects.equals(this.commandLine, v220DevfileCommandsItemsExec.commandLine) &&
        Objects.equals(this.component, v220DevfileCommandsItemsExec.component) &&
        Objects.equals(this.env, v220DevfileCommandsItemsExec.env) &&
        Objects.equals(this.group, v220DevfileCommandsItemsExec.group) &&
        Objects.equals(this.hotReloadCapable, v220DevfileCommandsItemsExec.hotReloadCapable) &&
        Objects.equals(this.label, v220DevfileCommandsItemsExec.label) &&
        Objects.equals(this.workingDir, v220DevfileCommandsItemsExec.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, component, env, group, hotReloadCapable, label, workingDir);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V220DevfileCommandsItemsExec {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    hotReloadCapable: ").append(toIndentedString(hotReloadCapable)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

