/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.che_incubator.devfile.kubernetes.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.che_incubator.devfile.kubernetes.client.models.V1alpha2DevWorkspaceSpecTemplateCommandsItemsCompositeGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Composite command that allows executing several sub-commands either sequentially or concurrently
 */
@ApiModel(description = "Composite command that allows executing several sub-commands either sequentially or concurrently")

public class V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite {
  public static final String SERIALIZED_NAME_COMMANDS = "commands";
  @SerializedName(SERIALIZED_NAME_COMMANDS)
  private List<String> commands = null;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private V1alpha2DevWorkspaceSpecTemplateCommandsItemsCompositeGroup group;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PARALLEL = "parallel";
  @SerializedName(SERIALIZED_NAME_PARALLEL)
  private Boolean parallel;


  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite commands(List<String> commands) {
    
    this.commands = commands;
    return this;
  }

  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite addCommandsItem(String commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<>();
    }
    this.commands.add(commandsItem);
    return this;
  }

   /**
   * The commands that comprise this composite command
   * @return commands
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The commands that comprise this composite command")

  public List<String> getCommands() {
    return commands;
  }


  public void setCommands(List<String> commands) {
    this.commands = commands;
  }


  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite group(V1alpha2DevWorkspaceSpecTemplateCommandsItemsCompositeGroup group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsCompositeGroup getGroup() {
    return group;
  }


  public void setGroup(V1alpha2DevWorkspaceSpecTemplateCommandsItemsCompositeGroup group) {
    this.group = group;
  }


  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Optional label that provides a label for this command to be used in Editor UI menus for example
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional label that provides a label for this command to be used in Editor UI menus for example")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite parallel(Boolean parallel) {
    
    this.parallel = parallel;
    return this;
  }

   /**
   * Indicates if the sub-commands should be executed concurrently
   * @return parallel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the sub-commands should be executed concurrently")

  public Boolean getParallel() {
    return parallel;
  }


  public void setParallel(Boolean parallel) {
    this.parallel = parallel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite v1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite = (V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite) o;
    return Objects.equals(this.commands, v1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite.commands) &&
        Objects.equals(this.group, v1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite.group) &&
        Objects.equals(this.label, v1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite.label) &&
        Objects.equals(this.parallel, v1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite.parallel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commands, group, label, parallel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha2DevWorkspaceSpecTemplateCommandsItemsComposite {\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

